//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Member.Customer {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CustomerDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CustomerDataSet : global::System.Data.DataSet {
        
        private tbl_NetMembershipDataTable tabletbl_NetMembership;
        
        private tbl_CustomerDataTable tabletbl_Customer;
        
        private global::System.Data.DataRelation relationtbl_Customer_tbl_NetMembership;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CustomerDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbl_NetMembership"] != null)) {
                    base.Tables.Add(new tbl_NetMembershipDataTable(ds.Tables["tbl_NetMembership"]));
                }
                if ((ds.Tables["tbl_Customer"] != null)) {
                    base.Tables.Add(new tbl_CustomerDataTable(ds.Tables["tbl_Customer"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_NetMembershipDataTable tbl_NetMembership {
            get {
                return this.tabletbl_NetMembership;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_CustomerDataTable tbl_Customer {
            get {
                return this.tabletbl_Customer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CustomerDataSet cln = ((CustomerDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tbl_NetMembership"] != null)) {
                    base.Tables.Add(new tbl_NetMembershipDataTable(ds.Tables["tbl_NetMembership"]));
                }
                if ((ds.Tables["tbl_Customer"] != null)) {
                    base.Tables.Add(new tbl_CustomerDataTable(ds.Tables["tbl_Customer"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletbl_NetMembership = ((tbl_NetMembershipDataTable)(base.Tables["tbl_NetMembership"]));
            if ((initTable == true)) {
                if ((this.tabletbl_NetMembership != null)) {
                    this.tabletbl_NetMembership.InitVars();
                }
            }
            this.tabletbl_Customer = ((tbl_CustomerDataTable)(base.Tables["tbl_Customer"]));
            if ((initTable == true)) {
                if ((this.tabletbl_Customer != null)) {
                    this.tabletbl_Customer.InitVars();
                }
            }
            this.relationtbl_Customer_tbl_NetMembership = this.Relations["tbl_Customer_tbl_NetMembership"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CustomerDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CustomerDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletbl_NetMembership = new tbl_NetMembershipDataTable();
            base.Tables.Add(this.tabletbl_NetMembership);
            this.tabletbl_Customer = new tbl_CustomerDataTable();
            base.Tables.Add(this.tabletbl_Customer);
            this.relationtbl_Customer_tbl_NetMembership = new global::System.Data.DataRelation("tbl_Customer_tbl_NetMembership", new global::System.Data.DataColumn[] {
                        this.tabletbl_Customer.cusIDColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbl_NetMembership.cusIDColumn}, false);
            this.Relations.Add(this.relationtbl_Customer_tbl_NetMembership);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_NetMembership() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_Customer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CustomerDataSet ds = new CustomerDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tbl_NetMembershipRowChangeEventHandler(object sender, tbl_NetMembershipRowChangeEvent e);
        
        public delegate void tbl_CustomerRowChangeEventHandler(object sender, tbl_CustomerRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_NetMembershipDataTable : global::System.Data.TypedTableBase<tbl_NetMembershipRow> {
            
            private global::System.Data.DataColumn columncusID;
            
            private global::System.Data.DataColumn columnmtyCode;
            
            private global::System.Data.DataColumn columnMemType;
            
            private global::System.Data.DataColumn columnnmbDateStart;
            
            private global::System.Data.DataColumn columnnmbDateEnd;
            
            private global::System.Data.DataColumn columnnmbDateCreated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipDataTable() {
                this.TableName = "tbl_NetMembership";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_NetMembershipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_NetMembershipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusIDColumn {
                get {
                    return this.columncusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mtyCodeColumn {
                get {
                    return this.columnmtyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemTypeColumn {
                get {
                    return this.columnMemType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nmbDateStartColumn {
                get {
                    return this.columnnmbDateStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nmbDateEndColumn {
                get {
                    return this.columnnmbDateEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nmbDateCreatedColumn {
                get {
                    return this.columnnmbDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRow this[int index] {
                get {
                    return ((tbl_NetMembershipRow)(this.Rows[index]));
                }
            }
            
            public event tbl_NetMembershipRowChangeEventHandler tbl_NetMembershipRowChanging;
            
            public event tbl_NetMembershipRowChangeEventHandler tbl_NetMembershipRowChanged;
            
            public event tbl_NetMembershipRowChangeEventHandler tbl_NetMembershipRowDeleting;
            
            public event tbl_NetMembershipRowChangeEventHandler tbl_NetMembershipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_NetMembershipRow(tbl_NetMembershipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRow Addtbl_NetMembershipRow(tbl_CustomerRow parenttbl_CustomerRowBytbl_Customer_tbl_NetMembership, string mtyCode, string MemType, System.DateTime nmbDateStart, System.DateTime nmbDateEnd, System.DateTime nmbDateCreated) {
                tbl_NetMembershipRow rowtbl_NetMembershipRow = ((tbl_NetMembershipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        mtyCode,
                        MemType,
                        nmbDateStart,
                        nmbDateEnd,
                        nmbDateCreated};
                if ((parenttbl_CustomerRowBytbl_Customer_tbl_NetMembership != null)) {
                    columnValuesArray[0] = parenttbl_CustomerRowBytbl_Customer_tbl_NetMembership[0];
                }
                rowtbl_NetMembershipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_NetMembershipRow);
                return rowtbl_NetMembershipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRow FindBycusIDmtyCode(int cusID, string mtyCode) {
                return ((tbl_NetMembershipRow)(this.Rows.Find(new object[] {
                            cusID,
                            mtyCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_NetMembershipDataTable cln = ((tbl_NetMembershipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_NetMembershipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncusID = base.Columns["cusID"];
                this.columnmtyCode = base.Columns["mtyCode"];
                this.columnMemType = base.Columns["MemType"];
                this.columnnmbDateStart = base.Columns["nmbDateStart"];
                this.columnnmbDateEnd = base.Columns["nmbDateEnd"];
                this.columnnmbDateCreated = base.Columns["nmbDateCreated"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncusID = new global::System.Data.DataColumn("cusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusID);
                this.columnmtyCode = new global::System.Data.DataColumn("mtyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmtyCode);
                this.columnMemType = new global::System.Data.DataColumn("MemType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemType);
                this.columnnmbDateStart = new global::System.Data.DataColumn("nmbDateStart", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnmbDateStart);
                this.columnnmbDateEnd = new global::System.Data.DataColumn("nmbDateEnd", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnmbDateEnd);
                this.columnnmbDateCreated = new global::System.Data.DataColumn("nmbDateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnmbDateCreated);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncusID,
                                this.columnmtyCode}, true));
                this.columncusID.AllowDBNull = false;
                this.columnmtyCode.AllowDBNull = false;
                this.columnmtyCode.MaxLength = 16;
                this.columnMemType.AllowDBNull = false;
                this.columnMemType.MaxLength = 32;
                this.columnnmbDateStart.AllowDBNull = false;
                this.columnnmbDateEnd.AllowDBNull = false;
                this.columnnmbDateCreated.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRow Newtbl_NetMembershipRow() {
                return ((tbl_NetMembershipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_NetMembershipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_NetMembershipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_NetMembershipRowChanged != null)) {
                    this.tbl_NetMembershipRowChanged(this, new tbl_NetMembershipRowChangeEvent(((tbl_NetMembershipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_NetMembershipRowChanging != null)) {
                    this.tbl_NetMembershipRowChanging(this, new tbl_NetMembershipRowChangeEvent(((tbl_NetMembershipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_NetMembershipRowDeleted != null)) {
                    this.tbl_NetMembershipRowDeleted(this, new tbl_NetMembershipRowChangeEvent(((tbl_NetMembershipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_NetMembershipRowDeleting != null)) {
                    this.tbl_NetMembershipRowDeleting(this, new tbl_NetMembershipRowChangeEvent(((tbl_NetMembershipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_NetMembershipRow(tbl_NetMembershipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CustomerDataSet ds = new CustomerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_NetMembershipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_CustomerDataTable : global::System.Data.TypedTableBase<tbl_CustomerRow> {
            
            private global::System.Data.DataColumn columncusID;
            
            private global::System.Data.DataColumn columncusCustNum;
            
            private global::System.Data.DataColumn columncusFirstName;
            
            private global::System.Data.DataColumn columncusLastName;
            
            private global::System.Data.DataColumn columncusUserName;
            
            private global::System.Data.DataColumn columnaddPostalCode;
            
            private global::System.Data.DataColumn columnIsEmployee;
            
            private global::System.Data.DataColumn columncusPhone1;
            
            private global::System.Data.DataColumn columncusEmail;
            
            private global::System.Data.DataColumn columncusGUID;
            
            private global::System.Data.DataColumn columncusDisplayNameUpdated;
            
            private global::System.Data.DataColumn columncusDisplayName;
            
            private global::System.Data.DataColumn columncusComplimentsOf;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerDataTable() {
                this.TableName = "tbl_Customer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_CustomerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_CustomerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusIDColumn {
                get {
                    return this.columncusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusCustNumColumn {
                get {
                    return this.columncusCustNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusFirstNameColumn {
                get {
                    return this.columncusFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusLastNameColumn {
                get {
                    return this.columncusLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusUserNameColumn {
                get {
                    return this.columncusUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn addPostalCodeColumn {
                get {
                    return this.columnaddPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEmployeeColumn {
                get {
                    return this.columnIsEmployee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusPhone1Column {
                get {
                    return this.columncusPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusEmailColumn {
                get {
                    return this.columncusEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusGUIDColumn {
                get {
                    return this.columncusGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusDisplayNameUpdatedColumn {
                get {
                    return this.columncusDisplayNameUpdated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusDisplayNameColumn {
                get {
                    return this.columncusDisplayName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cusComplimentsOfColumn {
                get {
                    return this.columncusComplimentsOf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRow this[int index] {
                get {
                    return ((tbl_CustomerRow)(this.Rows[index]));
                }
            }
            
            public event tbl_CustomerRowChangeEventHandler tbl_CustomerRowChanging;
            
            public event tbl_CustomerRowChangeEventHandler tbl_CustomerRowChanged;
            
            public event tbl_CustomerRowChangeEventHandler tbl_CustomerRowDeleting;
            
            public event tbl_CustomerRowChangeEventHandler tbl_CustomerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_CustomerRow(tbl_CustomerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRow Addtbl_CustomerRow(int cusID, string cusCustNum, string cusFirstName, string cusLastName, string cusUserName, string addPostalCode, bool IsEmployee, string cusPhone1, string cusEmail, System.Guid cusGUID, System.DateTime cusDisplayNameUpdated, string cusDisplayName, string cusComplimentsOf) {
                tbl_CustomerRow rowtbl_CustomerRow = ((tbl_CustomerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cusID,
                        cusCustNum,
                        cusFirstName,
                        cusLastName,
                        cusUserName,
                        addPostalCode,
                        IsEmployee,
                        cusPhone1,
                        cusEmail,
                        cusGUID,
                        cusDisplayNameUpdated,
                        cusDisplayName,
                        cusComplimentsOf};
                rowtbl_CustomerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_CustomerRow);
                return rowtbl_CustomerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRow FindBycusID(int cusID) {
                return ((tbl_CustomerRow)(this.Rows.Find(new object[] {
                            cusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_CustomerDataTable cln = ((tbl_CustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_CustomerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncusID = base.Columns["cusID"];
                this.columncusCustNum = base.Columns["cusCustNum"];
                this.columncusFirstName = base.Columns["cusFirstName"];
                this.columncusLastName = base.Columns["cusLastName"];
                this.columncusUserName = base.Columns["cusUserName"];
                this.columnaddPostalCode = base.Columns["addPostalCode"];
                this.columnIsEmployee = base.Columns["IsEmployee"];
                this.columncusPhone1 = base.Columns["cusPhone1"];
                this.columncusEmail = base.Columns["cusEmail"];
                this.columncusGUID = base.Columns["cusGUID"];
                this.columncusDisplayNameUpdated = base.Columns["cusDisplayNameUpdated"];
                this.columncusDisplayName = base.Columns["cusDisplayName"];
                this.columncusComplimentsOf = base.Columns["cusComplimentsOf"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncusID = new global::System.Data.DataColumn("cusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusID);
                this.columncusCustNum = new global::System.Data.DataColumn("cusCustNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusCustNum);
                this.columncusFirstName = new global::System.Data.DataColumn("cusFirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusFirstName);
                this.columncusLastName = new global::System.Data.DataColumn("cusLastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusLastName);
                this.columncusUserName = new global::System.Data.DataColumn("cusUserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusUserName);
                this.columnaddPostalCode = new global::System.Data.DataColumn("addPostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddPostalCode);
                this.columnIsEmployee = new global::System.Data.DataColumn("IsEmployee", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEmployee);
                this.columncusPhone1 = new global::System.Data.DataColumn("cusPhone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusPhone1);
                this.columncusEmail = new global::System.Data.DataColumn("cusEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusEmail);
                this.columncusGUID = new global::System.Data.DataColumn("cusGUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusGUID);
                this.columncusDisplayNameUpdated = new global::System.Data.DataColumn("cusDisplayNameUpdated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusDisplayNameUpdated);
                this.columncusDisplayName = new global::System.Data.DataColumn("cusDisplayName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusDisplayName);
                this.columncusComplimentsOf = new global::System.Data.DataColumn("cusComplimentsOf", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncusComplimentsOf);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncusID}, true));
                this.columncusID.AllowDBNull = false;
                this.columncusID.ReadOnly = true;
                this.columncusID.Unique = true;
                this.columncusCustNum.ReadOnly = true;
                this.columncusCustNum.MaxLength = 32;
                this.columncusFirstName.ReadOnly = true;
                this.columncusFirstName.MaxLength = 64;
                this.columncusLastName.ReadOnly = true;
                this.columncusLastName.MaxLength = 64;
                this.columncusUserName.ReadOnly = true;
                this.columncusUserName.MaxLength = 64;
                this.columnaddPostalCode.ReadOnly = true;
                this.columnaddPostalCode.MaxLength = 32;
                this.columnIsEmployee.ReadOnly = true;
                this.columncusPhone1.ReadOnly = true;
                this.columncusEmail.ReadOnly = true;
                this.columncusGUID.AllowDBNull = false;
                this.columncusGUID.ReadOnly = true;
                this.columncusDisplayNameUpdated.AllowDBNull = false;
                this.columncusDisplayNameUpdated.ReadOnly = true;
                this.columncusDisplayName.ReadOnly = true;
                this.columncusComplimentsOf.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRow Newtbl_CustomerRow() {
                return ((tbl_CustomerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_CustomerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_CustomerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_CustomerRowChanged != null)) {
                    this.tbl_CustomerRowChanged(this, new tbl_CustomerRowChangeEvent(((tbl_CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_CustomerRowChanging != null)) {
                    this.tbl_CustomerRowChanging(this, new tbl_CustomerRowChangeEvent(((tbl_CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_CustomerRowDeleted != null)) {
                    this.tbl_CustomerRowDeleted(this, new tbl_CustomerRowChangeEvent(((tbl_CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_CustomerRowDeleting != null)) {
                    this.tbl_CustomerRowDeleting(this, new tbl_CustomerRowChangeEvent(((tbl_CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_CustomerRow(tbl_CustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CustomerDataSet ds = new CustomerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_CustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_NetMembershipRow : global::System.Data.DataRow {
            
            private tbl_NetMembershipDataTable tabletbl_NetMembership;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_NetMembershipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_NetMembership = ((tbl_NetMembershipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cusID {
                get {
                    return ((int)(this[this.tabletbl_NetMembership.cusIDColumn]));
                }
                set {
                    this[this.tabletbl_NetMembership.cusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mtyCode {
                get {
                    return ((string)(this[this.tabletbl_NetMembership.mtyCodeColumn]));
                }
                set {
                    this[this.tabletbl_NetMembership.mtyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MemType {
                get {
                    return ((string)(this[this.tabletbl_NetMembership.MemTypeColumn]));
                }
                set {
                    this[this.tabletbl_NetMembership.MemTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nmbDateStart {
                get {
                    return ((global::System.DateTime)(this[this.tabletbl_NetMembership.nmbDateStartColumn]));
                }
                set {
                    this[this.tabletbl_NetMembership.nmbDateStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nmbDateEnd {
                get {
                    return ((global::System.DateTime)(this[this.tabletbl_NetMembership.nmbDateEndColumn]));
                }
                set {
                    this[this.tabletbl_NetMembership.nmbDateEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nmbDateCreated {
                get {
                    return ((global::System.DateTime)(this[this.tabletbl_NetMembership.nmbDateCreatedColumn]));
                }
                set {
                    this[this.tabletbl_NetMembership.nmbDateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRow tbl_CustomerRow {
                get {
                    return ((tbl_CustomerRow)(this.GetParentRow(this.Table.ParentRelations["tbl_Customer_tbl_NetMembership"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tbl_Customer_tbl_NetMembership"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_CustomerRow : global::System.Data.DataRow {
            
            private tbl_CustomerDataTable tabletbl_Customer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_CustomerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_Customer = ((tbl_CustomerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cusID {
                get {
                    return ((int)(this[this.tabletbl_Customer.cusIDColumn]));
                }
                set {
                    this[this.tabletbl_Customer.cusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusCustNum {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusCustNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusCustNum\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusCustNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusFirstName {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusFirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusFirstName\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusFirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusLastName {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusLastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusLastName\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusLastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusUserName {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusUserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusUserName\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusUserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addPostalCode {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.addPostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'addPostalCode\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.addPostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployee {
                get {
                    try {
                        return ((bool)(this[this.tabletbl_Customer.IsEmployeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEmployee\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.IsEmployeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusPhone1 {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusPhone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusPhone1\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusPhone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusEmail {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusEmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusEmail\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid cusGUID {
                get {
                    return ((global::System.Guid)(this[this.tabletbl_Customer.cusGUIDColumn]));
                }
                set {
                    this[this.tabletbl_Customer.cusGUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime cusDisplayNameUpdated {
                get {
                    return ((global::System.DateTime)(this[this.tabletbl_Customer.cusDisplayNameUpdatedColumn]));
                }
                set {
                    this[this.tabletbl_Customer.cusDisplayNameUpdatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusDisplayName {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusDisplayNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusDisplayName\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusDisplayNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cusComplimentsOf {
                get {
                    try {
                        return ((string)(this[this.tabletbl_Customer.cusComplimentsOfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cusComplimentsOf\' in table \'tbl_Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_Customer.cusComplimentsOfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusCustNumNull() {
                return this.IsNull(this.tabletbl_Customer.cusCustNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusCustNumNull() {
                this[this.tabletbl_Customer.cusCustNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusFirstNameNull() {
                return this.IsNull(this.tabletbl_Customer.cusFirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusFirstNameNull() {
                this[this.tabletbl_Customer.cusFirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusLastNameNull() {
                return this.IsNull(this.tabletbl_Customer.cusLastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusLastNameNull() {
                this[this.tabletbl_Customer.cusLastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusUserNameNull() {
                return this.IsNull(this.tabletbl_Customer.cusUserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusUserNameNull() {
                this[this.tabletbl_Customer.cusUserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddPostalCodeNull() {
                return this.IsNull(this.tabletbl_Customer.addPostalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddPostalCodeNull() {
                this[this.tabletbl_Customer.addPostalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEmployeeNull() {
                return this.IsNull(this.tabletbl_Customer.IsEmployeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEmployeeNull() {
                this[this.tabletbl_Customer.IsEmployeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusPhone1Null() {
                return this.IsNull(this.tabletbl_Customer.cusPhone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusPhone1Null() {
                this[this.tabletbl_Customer.cusPhone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusEmailNull() {
                return this.IsNull(this.tabletbl_Customer.cusEmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusEmailNull() {
                this[this.tabletbl_Customer.cusEmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusDisplayNameNull() {
                return this.IsNull(this.tabletbl_Customer.cusDisplayNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusDisplayNameNull() {
                this[this.tabletbl_Customer.cusDisplayNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscusComplimentsOfNull() {
                return this.IsNull(this.tabletbl_Customer.cusComplimentsOfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcusComplimentsOfNull() {
                this[this.tabletbl_Customer.cusComplimentsOfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRow[] Gettbl_NetMembershipRows() {
                if ((this.Table.ChildRelations["tbl_Customer_tbl_NetMembership"] == null)) {
                    return new tbl_NetMembershipRow[0];
                }
                else {
                    return ((tbl_NetMembershipRow[])(base.GetChildRows(this.Table.ChildRelations["tbl_Customer_tbl_NetMembership"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_NetMembershipRowChangeEvent : global::System.EventArgs {
            
            private tbl_NetMembershipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRowChangeEvent(tbl_NetMembershipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_NetMembershipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_CustomerRowChangeEvent : global::System.EventArgs {
            
            private tbl_CustomerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRowChangeEvent(tbl_CustomerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_CustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Member.Customer.CustomerDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_NetMembershipTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_NetMembershipTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_NetMembership";
            tableMapping.ColumnMappings.Add("cusID", "cusID");
            tableMapping.ColumnMappings.Add("mtyCode", "mtyCode");
            tableMapping.ColumnMappings.Add("nmbDateStart", "nmbDateStart");
            tableMapping.ColumnMappings.Add("nmbDateEnd", "nmbDateEnd");
            tableMapping.ColumnMappings.Add("nmbDateCreated", "nmbDateCreated");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tbl_NetMembership] WHERE (([cusID] = @Original_cusID) AND ([mt" +
                "yCode] = @Original_mtyCode) AND ([nmbDateStart] = @Original_nmbDateStart) AND ([" +
                "nmbDateEnd] = @Original_nmbDateEnd) AND ([nmbDateCreated] = @Original_nmbDateCre" +
                "ated))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cusID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mtyCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mtyCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nmbDateStart", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateStart", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nmbDateEnd", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateEnd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nmbDateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateCreated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tbl_NetMembership] ([cusID], [mtyCode], [nmbDateStart], [nmbDateEnd], [nmbDateCreated]) VALUES (@cusID, @mtyCode, @nmbDateStart, @nmbDateEnd, @nmbDateCreated);
SELECT cusID, mtyCode, nmbDateStart, nmbDateEnd, nmbDateCreated FROM tbl_NetMembership WHERE (cusID = @cusID) AND (mtyCode = @mtyCode)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cusID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cusID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mtyCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mtyCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nmbDateStart", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateStart", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nmbDateEnd", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateEnd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nmbDateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tbl_NetMembership] SET [cusID] = @cusID, [mtyCode] = @mtyCode, [nmbDateStart] = @nmbDateStart, [nmbDateEnd] = @nmbDateEnd, [nmbDateCreated] = @nmbDateCreated WHERE (([cusID] = @Original_cusID) AND ([mtyCode] = @Original_mtyCode) AND ([nmbDateStart] = @Original_nmbDateStart) AND ([nmbDateEnd] = @Original_nmbDateEnd) AND ([nmbDateCreated] = @Original_nmbDateCreated));
SELECT cusID, mtyCode, nmbDateStart, nmbDateEnd, nmbDateCreated FROM tbl_NetMembership WHERE (cusID = @cusID) AND (mtyCode = @mtyCode)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cusID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cusID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mtyCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mtyCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nmbDateStart", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateStart", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nmbDateEnd", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateEnd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nmbDateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cusID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cusID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mtyCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mtyCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nmbDateStart", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateStart", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nmbDateEnd", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateEnd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nmbDateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nmbDateCreated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["AHT_MainConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT cusID, mtyCode, nmbDateStart, nmbDateEnd, nmbDateCreated FROM dbo.tbl_NetM" +
                "embership";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CustomerDataSet.tbl_NetMembershipDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CustomerDataSet.tbl_NetMembershipDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CustomerDataSet.tbl_NetMembershipDataTable dataTable = new CustomerDataSet.tbl_NetMembershipDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CustomerDataSet.tbl_NetMembershipDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CustomerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tbl_NetMembership");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_cusID, string Original_mtyCode, System.DateTime Original_nmbDateStart, System.DateTime Original_nmbDateEnd, System.DateTime Original_nmbDateCreated) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_cusID));
            if ((Original_mtyCode == null)) {
                throw new global::System.ArgumentNullException("Original_mtyCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_mtyCode));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_nmbDateStart));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_nmbDateEnd));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_nmbDateCreated));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int cusID, string mtyCode, System.DateTime nmbDateStart, System.DateTime nmbDateEnd, System.DateTime nmbDateCreated) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(cusID));
            if ((mtyCode == null)) {
                throw new global::System.ArgumentNullException("mtyCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(mtyCode));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(nmbDateStart));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(nmbDateEnd));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(nmbDateCreated));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int cusID, string mtyCode, System.DateTime nmbDateStart, System.DateTime nmbDateEnd, System.DateTime nmbDateCreated, int Original_cusID, string Original_mtyCode, System.DateTime Original_nmbDateStart, System.DateTime Original_nmbDateEnd, System.DateTime Original_nmbDateCreated) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(cusID));
            if ((mtyCode == null)) {
                throw new global::System.ArgumentNullException("mtyCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(mtyCode));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(nmbDateStart));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(nmbDateEnd));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(nmbDateCreated));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_cusID));
            if ((Original_mtyCode == null)) {
                throw new global::System.ArgumentNullException("Original_mtyCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_mtyCode));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Original_nmbDateStart));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_nmbDateEnd));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_nmbDateCreated));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime nmbDateStart, System.DateTime nmbDateEnd, System.DateTime nmbDateCreated, int Original_cusID, string Original_mtyCode, System.DateTime Original_nmbDateStart, System.DateTime Original_nmbDateEnd, System.DateTime Original_nmbDateCreated) {
            return this.Update(Original_cusID, Original_mtyCode, nmbDateStart, nmbDateEnd, nmbDateCreated, Original_cusID, Original_mtyCode, Original_nmbDateStart, Original_nmbDateEnd, Original_nmbDateCreated);
        }
    }
}

#pragma warning restore 1591